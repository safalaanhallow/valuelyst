{"ast":null,"code":"/**\n * Utility functions for form handling across components\n */\n\n/**\n * Creates a field name helper for a specific form section\n * @param {string} section - The section prefix (e.g., 'zoning', 'identification')\n * @returns {Function} - A function that prefixes field names with the section\n */\nexport const createFieldNameHelper = section => {\n  return name => `${section}.${name}`;\n};\n\n/**\n * Creates a form change handler for a specific component\n * @param {Object} formik - The formik object passed to the component\n * @param {string} section - The section prefix for the component\n * @returns {Function} - A handler function for form changes\n */\nexport const createChangeHandler = (formik, section) => {\n  return e => {\n    // Extract target information\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n\n    // Handle nested fields\n    formik.handleChange(e);\n\n    // Additional custom handling can be added here, if needed\n    // For example: updating dependent fields or calculations\n  };\n};\n\n/**\n * Gets a nested value from an object using a dot notation path\n * @param {Object} obj - The object to get the value from\n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */\nexport const getNestedValue = (obj, path, defaultValue = '') => {\n  if (!obj) return defaultValue;\n  const parts = path.split('.');\n  let current = obj;\n  for (const part of parts) {\n    if (current === undefined || current === null) return defaultValue;\n    current = current[part];\n  }\n  return current !== undefined && current !== null ? current : defaultValue;\n};\n\n/**\n * Sets a nested value in an object using a dot notation path\n * @param {Object} obj - The object to set the value in\n * @param {string} path - Dot notation path to set the value\n * @param {*} value - The value to set\n * @returns {Object} - A new object with the updated value\n */\nexport const setNestedValue = (obj, path, value) => {\n  const parts = path.split('.');\n  const lastPart = parts.pop();\n  let current = {\n    ...obj\n  };\n  let currentObj = current;\n  for (const part of parts) {\n    currentObj[part] = {\n      ...currentObj[part]\n    };\n    currentObj = currentObj[part];\n  }\n  currentObj[lastPart] = value;\n  return current;\n};","map":{"version":3,"names":["createFieldNameHelper","section","name","createChangeHandler","formik","e","value","type","checked","target","fieldValue","handleChange","getNestedValue","obj","path","defaultValue","parts","split","current","part","undefined","setNestedValue","lastPart","pop","currentObj"],"sources":["C:/Users/sures/Desktop/Valuelyst/client/src/utils/formHelpers.js"],"sourcesContent":["/**\n * Utility functions for form handling across components\n */\n\n/**\n * Creates a field name helper for a specific form section\n * @param {string} section - The section prefix (e.g., 'zoning', 'identification')\n * @returns {Function} - A function that prefixes field names with the section\n */\nexport const createFieldNameHelper = (section) => {\n  return (name) => `${section}.${name}`;\n};\n\n/**\n * Creates a form change handler for a specific component\n * @param {Object} formik - The formik object passed to the component\n * @param {string} section - The section prefix for the component\n * @returns {Function} - A handler function for form changes\n */\nexport const createChangeHandler = (formik, section) => {\n  return (e) => {\n    // Extract target information\n    const { name, value, type, checked } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    \n    // Handle nested fields\n    formik.handleChange(e);\n    \n    // Additional custom handling can be added here, if needed\n    // For example: updating dependent fields or calculations\n  };\n};\n\n/**\n * Gets a nested value from an object using a dot notation path\n * @param {Object} obj - The object to get the value from\n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */\nexport const getNestedValue = (obj, path, defaultValue = '') => {\n  if (!obj) return defaultValue;\n  \n  const parts = path.split('.');\n  let current = obj;\n  \n  for (const part of parts) {\n    if (current === undefined || current === null) return defaultValue;\n    current = current[part];\n  }\n  \n  return current !== undefined && current !== null ? current : defaultValue;\n};\n\n/**\n * Sets a nested value in an object using a dot notation path\n * @param {Object} obj - The object to set the value in\n * @param {string} path - Dot notation path to set the value\n * @param {*} value - The value to set\n * @returns {Object} - A new object with the updated value\n */\nexport const setNestedValue = (obj, path, value) => {\n  const parts = path.split('.');\n  const lastPart = parts.pop();\n  let current = { ...obj };\n  let currentObj = current;\n  \n  for (const part of parts) {\n    currentObj[part] = { ...currentObj[part] };\n    currentObj = currentObj[part];\n  }\n  \n  currentObj[lastPart] = value;\n  return current;\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAIC,OAAO,IAAK;EAChD,OAAQC,IAAI,IAAK,GAAGD,OAAO,IAAIC,IAAI,EAAE;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,MAAM,EAAEH,OAAO,KAAK;EACtD,OAAQI,CAAC,IAAK;IACZ;IACA,MAAM;MAAEH,IAAI;MAAEI,KAAK;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGH,CAAC,CAACI,MAAM;IAC/C,MAAMC,UAAU,GAAGH,IAAI,KAAK,UAAU,GAAGC,OAAO,GAAGF,KAAK;;IAExD;IACAF,MAAM,CAACO,YAAY,CAACN,CAAC,CAAC;;IAEtB;IACA;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,YAAY,GAAG,EAAE,KAAK;EAC9D,IAAI,CAACF,GAAG,EAAE,OAAOE,YAAY;EAE7B,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,OAAO,GAAGL,GAAG;EAEjB,KAAK,MAAMM,IAAI,IAAIH,KAAK,EAAE;IACxB,IAAIE,OAAO,KAAKE,SAAS,IAAIF,OAAO,KAAK,IAAI,EAAE,OAAOH,YAAY;IAClEG,OAAO,GAAGA,OAAO,CAACC,IAAI,CAAC;EACzB;EAEA,OAAOD,OAAO,KAAKE,SAAS,IAAIF,OAAO,KAAK,IAAI,GAAGA,OAAO,GAAGH,YAAY;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAGA,CAACR,GAAG,EAAEC,IAAI,EAAER,KAAK,KAAK;EAClD,MAAMU,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC7B,MAAMK,QAAQ,GAAGN,KAAK,CAACO,GAAG,CAAC,CAAC;EAC5B,IAAIL,OAAO,GAAG;IAAE,GAAGL;EAAI,CAAC;EACxB,IAAIW,UAAU,GAAGN,OAAO;EAExB,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;IACxBQ,UAAU,CAACL,IAAI,CAAC,GAAG;MAAE,GAAGK,UAAU,CAACL,IAAI;IAAE,CAAC;IAC1CK,UAAU,GAAGA,UAAU,CAACL,IAAI,CAAC;EAC/B;EAEAK,UAAU,CAACF,QAAQ,CAAC,GAAGhB,KAAK;EAC5B,OAAOY,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}