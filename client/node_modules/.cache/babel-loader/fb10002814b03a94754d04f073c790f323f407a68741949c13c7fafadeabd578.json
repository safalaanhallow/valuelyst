{"ast":null,"code":"import * as Yup from 'yup';\n\n// Validation schema for the Property Characteristics Form\nexport const PropertyFormValidationSchema = Yup.object({\n  // Identification tab validations\n  apn: Yup.string().matches(/^\\d{3}-\\d{3}-\\d{3}$/, 'APN must be in format 123-456-789').required('APN is required'),\n  lastSaleDate: Yup.date().nullable().required('Last sale date is required'),\n  latitude: Yup.number().min(-90, 'Latitude must be between -90 and 90').max(90, 'Latitude must be between -90 and 90').required('Latitude is required'),\n  longitude: Yup.number().min(-180, 'Longitude must be between -180 and 180').max(180, 'Longitude must be between -180 and 180').required('Longitude is required'),\n  // Zoning tab validations\n  overlayZones: Yup.array().min(0, 'Select at least one overlay zone if applicable'),\n  frontSetback: Yup.number().min(0, 'Front setback must be a positive number').required('Front setback is required'),\n  rearSetback: Yup.number().min(0, 'Rear setback must be a positive number').required('Rear setback is required'),\n  sideSetback: Yup.number().min(0, 'Side setback must be a positive number').required('Side setback is required'),\n  parkingType: Yup.string().required('Parking type is required'),\n  // Physical Attributes tab validations\n  effectiveAge: Yup.number().min(1, 'Effective age must be at least 1 year').max(50, 'Effective age must be at most 50 years').required('Effective age is required'),\n  floorPlateArea: Yup.number().min(0, 'Floor plate area must be a positive number').required('Floor plate area is required'),\n  ceilingHeight: Yup.number().min(0, 'Ceiling height must be a positive number').required('Ceiling height is required'),\n  hasHVAC: Yup.boolean(),\n  hasSprinkler: Yup.boolean()\n});\n\n// Validation schema for the Financials Input Form\nexport const FinancialsValidationSchema = Yup.object({\n  // Income Statement validations\n  baseRent: Yup.number().min(0, 'Base rent must be a positive number').required('Base rent is required'),\n  percentageRent: Yup.number().min(0, 'Percentage rent must be a positive number').required('Percentage rent is required'),\n  otherIncome: Yup.number().min(0, 'Other income must be a positive number').required('Other income is required'),\n  expenseRecoveries: Yup.number().min(0, 'Expense recoveries must be a positive number').required('Expense recoveries is required'),\n  vacancyRate: Yup.number().min(0, 'Vacancy rate must be at least 0%').max(25, 'Vacancy rate must be at most 25%').required('Vacancy rate is required'),\n  managementFeePercentage: Yup.number().min(0, 'Management fee percentage must be at least 0%').max(10, 'Management fee percentage must be at most 10%').required('Management fee percentage is required'),\n  // Expense Calculator validations\n  expenseFrequency: Yup.string().oneOf(['annual', 'monthly'], 'Expense frequency must be either annual or monthly').required('Expense frequency is required'),\n  propertyTaxes: Yup.number().min(0, 'Property taxes must be a positive number').required('Property taxes are required'),\n  insurance: Yup.number().min(0, 'Insurance must be a positive number').required('Insurance is required'),\n  utilities: Yup.number().min(0, 'Utilities must be a positive number').required('Utilities value is required'),\n  repairsAndMaintenance: Yup.number().min(0, 'Repairs and maintenance must be a positive number').required('Repairs and maintenance is required'),\n  // Debt Structure validations\n  loanAmount: Yup.number().min(0, 'Loan amount must be a positive number').required('Loan amount is required'),\n  interestRate: Yup.number().min(0, 'Interest rate must be at least 0%').max(25, 'Interest rate must be at most 25%').required('Interest rate is required'),\n  loanTerm: Yup.number().min(1, 'Loan term must be at least 1 year').max(40, 'Loan term must be at most 40 years').required('Loan term is required'),\n  amortizationPeriod: Yup.number().min(1, 'Amortization period must be at least 1 year').max(40, 'Amortization period must be at most 40 years').required('Amortization period is required'),\n  propertyValue: Yup.number().min(0, 'Property value must be a positive number').required('Property value is required'),\n  prepaymentPenalty: Yup.boolean(),\n  prepaymentYears: Yup.number().when('prepaymentPenalty', {\n    is: true,\n    then: Yup.number().min(1, 'Prepayment years must be at least 1').max(10, 'Prepayment years must be at most 10').required('Prepayment years is required when penalty is enabled')\n  }),\n  prepaymentPercentage: Yup.number().when('prepaymentPenalty', {\n    is: true,\n    then: Yup.number().min(0, 'Prepayment percentage must be at least 0%').max(5, 'Prepayment percentage must be at most 5%').required('Prepayment percentage is required when penalty is enabled')\n  }),\n  balloonPayment: Yup.boolean(),\n  balloonYear: Yup.number().when('balloonPayment', {\n    is: true,\n    then: Yup.number().min(1, 'Balloon year must be at least 1').test('max-balloon-year', 'Balloon year must be less than the loan term', function (value) {\n      return value < this.parent.loanTerm;\n    }).required('Balloon year is required when balloon payment is enabled')\n  })\n});","map":{"version":3,"names":["Yup","PropertyFormValidationSchema","object","apn","string","matches","required","lastSaleDate","date","nullable","latitude","number","min","max","longitude","overlayZones","array","frontSetback","rearSetback","sideSetback","parkingType","effectiveAge","floorPlateArea","ceilingHeight","hasHVAC","boolean","hasSprinkler","FinancialsValidationSchema","baseRent","percentageRent","otherIncome","expenseRecoveries","vacancyRate","managementFeePercentage","expenseFrequency","oneOf","propertyTaxes","insurance","utilities","repairsAndMaintenance","loanAmount","interestRate","loanTerm","amortizationPeriod","propertyValue","prepaymentPenalty","prepaymentYears","when","is","then","prepaymentPercentage","balloonPayment","balloonYear","test","value","parent"],"sources":["C:/Users/sures/Desktop/Valuelyst/client/src/components/forms/validationSchema.js"],"sourcesContent":["import * as Yup from 'yup';\n\n// Validation schema for the Property Characteristics Form\nexport const PropertyFormValidationSchema = Yup.object({\n  // Identification tab validations\n  apn: Yup.string()\n    .matches(/^\\d{3}-\\d{3}-\\d{3}$/, 'APN must be in format 123-456-789')\n    .required('APN is required'),\n  lastSaleDate: Yup.date()\n    .nullable()\n    .required('Last sale date is required'),\n  latitude: Yup.number()\n    .min(-90, 'Latitude must be between -90 and 90')\n    .max(90, 'Latitude must be between -90 and 90')\n    .required('Latitude is required'),\n  longitude: Yup.number()\n    .min(-180, 'Longitude must be between -180 and 180')\n    .max(180, 'Longitude must be between -180 and 180')\n    .required('Longitude is required'),\n  \n  // Zoning tab validations\n  overlayZones: Yup.array()\n    .min(0, 'Select at least one overlay zone if applicable'),\n  frontSetback: Yup.number()\n    .min(0, 'Front setback must be a positive number')\n    .required('Front setback is required'),\n  rearSetback: Yup.number()\n    .min(0, 'Rear setback must be a positive number')\n    .required('Rear setback is required'),\n  sideSetback: Yup.number()\n    .min(0, 'Side setback must be a positive number')\n    .required('Side setback is required'),\n  parkingType: Yup.string()\n    .required('Parking type is required'),\n  \n  // Physical Attributes tab validations\n  effectiveAge: Yup.number()\n    .min(1, 'Effective age must be at least 1 year')\n    .max(50, 'Effective age must be at most 50 years')\n    .required('Effective age is required'),\n  floorPlateArea: Yup.number()\n    .min(0, 'Floor plate area must be a positive number')\n    .required('Floor plate area is required'),\n  ceilingHeight: Yup.number()\n    .min(0, 'Ceiling height must be a positive number')\n    .required('Ceiling height is required'),\n  hasHVAC: Yup.boolean(),\n  hasSprinkler: Yup.boolean(),\n});\n\n// Validation schema for the Financials Input Form\nexport const FinancialsValidationSchema = Yup.object({\n  // Income Statement validations\n  baseRent: Yup.number()\n    .min(0, 'Base rent must be a positive number')\n    .required('Base rent is required'),\n  percentageRent: Yup.number()\n    .min(0, 'Percentage rent must be a positive number')\n    .required('Percentage rent is required'),\n  otherIncome: Yup.number()\n    .min(0, 'Other income must be a positive number')\n    .required('Other income is required'),\n  expenseRecoveries: Yup.number()\n    .min(0, 'Expense recoveries must be a positive number')\n    .required('Expense recoveries is required'),\n  vacancyRate: Yup.number()\n    .min(0, 'Vacancy rate must be at least 0%')\n    .max(25, 'Vacancy rate must be at most 25%')\n    .required('Vacancy rate is required'),\n  managementFeePercentage: Yup.number()\n    .min(0, 'Management fee percentage must be at least 0%')\n    .max(10, 'Management fee percentage must be at most 10%')\n    .required('Management fee percentage is required'),\n  \n  // Expense Calculator validations\n  expenseFrequency: Yup.string()\n    .oneOf(['annual', 'monthly'], 'Expense frequency must be either annual or monthly')\n    .required('Expense frequency is required'),\n  propertyTaxes: Yup.number()\n    .min(0, 'Property taxes must be a positive number')\n    .required('Property taxes are required'),\n  insurance: Yup.number()\n    .min(0, 'Insurance must be a positive number')\n    .required('Insurance is required'),\n  utilities: Yup.number()\n    .min(0, 'Utilities must be a positive number')\n    .required('Utilities value is required'),\n  repairsAndMaintenance: Yup.number()\n    .min(0, 'Repairs and maintenance must be a positive number')\n    .required('Repairs and maintenance is required'),\n  \n  // Debt Structure validations\n  loanAmount: Yup.number()\n    .min(0, 'Loan amount must be a positive number')\n    .required('Loan amount is required'),\n  interestRate: Yup.number()\n    .min(0, 'Interest rate must be at least 0%')\n    .max(25, 'Interest rate must be at most 25%')\n    .required('Interest rate is required'),\n  loanTerm: Yup.number()\n    .min(1, 'Loan term must be at least 1 year')\n    .max(40, 'Loan term must be at most 40 years')\n    .required('Loan term is required'),\n  amortizationPeriod: Yup.number()\n    .min(1, 'Amortization period must be at least 1 year')\n    .max(40, 'Amortization period must be at most 40 years')\n    .required('Amortization period is required'),\n  propertyValue: Yup.number()\n    .min(0, 'Property value must be a positive number')\n    .required('Property value is required'),\n  prepaymentPenalty: Yup.boolean(),\n  prepaymentYears: Yup.number()\n    .when('prepaymentPenalty', {\n      is: true,\n      then: Yup.number()\n        .min(1, 'Prepayment years must be at least 1')\n        .max(10, 'Prepayment years must be at most 10')\n        .required('Prepayment years is required when penalty is enabled'),\n    }),\n  prepaymentPercentage: Yup.number()\n    .when('prepaymentPenalty', {\n      is: true,\n      then: Yup.number()\n        .min(0, 'Prepayment percentage must be at least 0%')\n        .max(5, 'Prepayment percentage must be at most 5%')\n        .required('Prepayment percentage is required when penalty is enabled'),\n    }),\n  balloonPayment: Yup.boolean(),\n  balloonYear: Yup.number()\n    .when('balloonPayment', {\n      is: true,\n      then: Yup.number()\n        .min(1, 'Balloon year must be at least 1')\n        .test(\n          'max-balloon-year',\n          'Balloon year must be less than the loan term',\n          function(value) {\n            return value < this.parent.loanTerm;\n          }\n        )\n        .required('Balloon year is required when balloon payment is enabled'),\n    }),\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}