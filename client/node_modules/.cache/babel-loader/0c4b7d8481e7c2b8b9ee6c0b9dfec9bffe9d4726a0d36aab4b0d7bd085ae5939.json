{"ast":null,"code":"/**\n * Form helper functions for field name management and change handling\n */\n\n/**\n * Creates a helper function for generating fully qualified field names with a prefix\n * @param {string} prefix - The prefix to add to field names (e.g., 'zoning', 'environmental')\n * @returns {Function} - A function that takes a field name and returns the prefixed name\n */\nexport const createFieldNameHelper = prefix => {\n  return name => `${prefix}.${name}`;\n};\n\n/**\n * Creates a handleChange function that wraps formik's handleChange\n * @param {Object} formik - The formik object\n * @returns {Function} - A function that handles form field changes\n */\nexport const createChangeHandler = formik => {\n  return e => {\n    formik.handleChange(e);\n  };\n};\n\n/**\n * Creates a setFieldValue function that wraps formik's setFieldValue\n * @param {Object} formik - The formik object\n * @param {string} prefix - Optional prefix to add to field names\n * @returns {Function} - A function that sets field values\n */\nexport const createSetFieldValueHandler = (formik, prefix = '') => {\n  return (name, value) => {\n    const fieldName = prefix ? `${prefix}.${name}` : name;\n    formik.setFieldValue(fieldName, value);\n  };\n};\n\n/**\n * Helper to safely get nested values from formik object\n * @param {Object} formik - The formik object \n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */\nexport const getNestedValue = (formik, path, defaultValue = '') => {\n  const parts = path.split('.');\n  let current = formik.values;\n  for (const part of parts) {\n    if (current == null) return defaultValue;\n    current = current[part];\n  }\n  return current !== undefined ? current : defaultValue;\n};","map":{"version":3,"names":["createFieldNameHelper","prefix","name","createChangeHandler","formik","e","handleChange","createSetFieldValueHandler","value","fieldName","setFieldValue","getNestedValue","path","defaultValue","parts","split","current","values","part","undefined"],"sources":["C:/Users/sures/Desktop/Valuelyst/client/src/utils/formHelpers.js"],"sourcesContent":["/**\n * Form helper functions for field name management and change handling\n */\n\n/**\n * Creates a helper function for generating fully qualified field names with a prefix\n * @param {string} prefix - The prefix to add to field names (e.g., 'zoning', 'environmental')\n * @returns {Function} - A function that takes a field name and returns the prefixed name\n */\nexport const createFieldNameHelper = (prefix) => {\n  return (name) => `${prefix}.${name}`;\n};\n\n/**\n * Creates a handleChange function that wraps formik's handleChange\n * @param {Object} formik - The formik object\n * @returns {Function} - A function that handles form field changes\n */\nexport const createChangeHandler = (formik) => {\n  return (e) => {\n    formik.handleChange(e);\n  };\n};\n\n/**\n * Creates a setFieldValue function that wraps formik's setFieldValue\n * @param {Object} formik - The formik object\n * @param {string} prefix - Optional prefix to add to field names\n * @returns {Function} - A function that sets field values\n */\nexport const createSetFieldValueHandler = (formik, prefix = '') => {\n  return (name, value) => {\n    const fieldName = prefix ? `${prefix}.${name}` : name;\n    formik.setFieldValue(fieldName, value);\n  };\n};\n\n/**\n * Helper to safely get nested values from formik object\n * @param {Object} formik - The formik object \n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */\nexport const getNestedValue = (formik, path, defaultValue = '') => {\n  const parts = path.split('.');\n  let current = formik.values;\n  \n  for (const part of parts) {\n    if (current == null) return defaultValue;\n    current = current[part];\n  }\n  \n  return current !== undefined ? current : defaultValue;\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAIC,MAAM,IAAK;EAC/C,OAAQC,IAAI,IAAK,GAAGD,MAAM,IAAIC,IAAI,EAAE;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIC,MAAM,IAAK;EAC7C,OAAQC,CAAC,IAAK;IACZD,MAAM,CAACE,YAAY,CAACD,CAAC,CAAC;EACxB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,0BAA0B,GAAGA,CAACH,MAAM,EAAEH,MAAM,GAAG,EAAE,KAAK;EACjE,OAAO,CAACC,IAAI,EAAEM,KAAK,KAAK;IACtB,MAAMC,SAAS,GAAGR,MAAM,GAAG,GAAGA,MAAM,IAAIC,IAAI,EAAE,GAAGA,IAAI;IACrDE,MAAM,CAACM,aAAa,CAACD,SAAS,EAAED,KAAK,CAAC;EACxC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAGA,CAACP,MAAM,EAAEQ,IAAI,EAAEC,YAAY,GAAG,EAAE,KAAK;EACjE,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,OAAO,GAAGZ,MAAM,CAACa,MAAM;EAE3B,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACxB,IAAIE,OAAO,IAAI,IAAI,EAAE,OAAOH,YAAY;IACxCG,OAAO,GAAGA,OAAO,CAACE,IAAI,CAAC;EACzB;EAEA,OAAOF,OAAO,KAAKG,SAAS,GAAGH,OAAO,GAAGH,YAAY;AACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}