{"ast":null,"code":"/**\n * Form helper functions for field name management and change handling\n *//**\n * Creates a helper function for generating fully qualified field names with a prefix\n * @param {string} prefix - The prefix to add to field names (e.g., 'zoning', 'environmental')\n * @returns {Function} - A function that takes a field name and returns the prefixed name\n */export const createFieldNameHelper=prefix=>{return name=>`${prefix}.${name}`;};/**\n * Creates a handleChange function that wraps formik's handleChange\n * @param {Object} formik - The formik object\n * @returns {Function} - A function that handles form field changes\n */export const createChangeHandler=formik=>{return e=>{formik.handleChange(e);};};/**\n * Creates a setFieldValue function that wraps formik's setFieldValue\n * @param {Object} formik - The formik object\n * @param {string} prefix - Optional prefix to add to field names\n * @returns {Function} - A function that sets field values\n */export const createSetFieldValueHandler=function(formik){let prefix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';return(name,value)=>{const fieldName=prefix?`${prefix}.${name}`:name;formik.setFieldValue(fieldName,value);};};/**\n * Helper to safely get nested values from formik object\n * @param {Object} formik - The formik object \n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */export const getNestedValue=function(formik,path){let defaultValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';const parts=path.split('.');let current=formik.values;for(const part of parts){if(current==null)return defaultValue;current=current[part];}return current!==undefined?current:defaultValue;};","map":{"version":3,"names":["createFieldNameHelper","prefix","name","createChangeHandler","formik","e","handleChange","createSetFieldValueHandler","arguments","length","undefined","value","fieldName","setFieldValue","getNestedValue","path","defaultValue","parts","split","current","values","part"],"sources":["C:/Users/sures/Desktop/Valuelyst/client/src/utils/formHelpers.js"],"sourcesContent":["/**\n * Form helper functions for field name management and change handling\n */\n\n/**\n * Creates a helper function for generating fully qualified field names with a prefix\n * @param {string} prefix - The prefix to add to field names (e.g., 'zoning', 'environmental')\n * @returns {Function} - A function that takes a field name and returns the prefixed name\n */\nexport const createFieldNameHelper = (prefix) => {\n  return (name) => `${prefix}.${name}`;\n};\n\n/**\n * Creates a handleChange function that wraps formik's handleChange\n * @param {Object} formik - The formik object\n * @returns {Function} - A function that handles form field changes\n */\nexport const createChangeHandler = (formik) => {\n  return (e) => {\n    formik.handleChange(e);\n  };\n};\n\n/**\n * Creates a setFieldValue function that wraps formik's setFieldValue\n * @param {Object} formik - The formik object\n * @param {string} prefix - Optional prefix to add to field names\n * @returns {Function} - A function that sets field values\n */\nexport const createSetFieldValueHandler = (formik, prefix = '') => {\n  return (name, value) => {\n    const fieldName = prefix ? `${prefix}.${name}` : name;\n    formik.setFieldValue(fieldName, value);\n  };\n};\n\n/**\n * Helper to safely get nested values from formik object\n * @param {Object} formik - The formik object \n * @param {string} path - Dot notation path to the value\n * @param {*} defaultValue - Default value if path doesn't exist\n * @returns {*} - The value at the path or defaultValue\n */\nexport const getNestedValue = (formik, path, defaultValue = '') => {\n  const parts = path.split('.');\n  let current = formik.values;\n  \n  for (const part of parts) {\n    if (current == null) return defaultValue;\n    current = current[part];\n  }\n  \n  return current !== undefined ? current : defaultValue;\n};\n"],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,qBAAqB,CAAIC,MAAM,EAAK,CAC/C,MAAQ,CAAAC,IAAI,EAAK,GAAGD,MAAM,IAAIC,IAAI,EAAE,CACtC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAIC,MAAM,EAAK,CAC7C,MAAQ,CAAAC,CAAC,EAAK,CACZD,MAAM,CAACE,YAAY,CAACD,CAAC,CAAC,CACxB,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,0BAA0B,CAAG,QAAAA,CAACH,MAAM,CAAkB,IAAhB,CAAAH,MAAM,CAAAO,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC5D,MAAO,CAACN,IAAI,CAAES,KAAK,GAAK,CACtB,KAAM,CAAAC,SAAS,CAAGX,MAAM,CAAG,GAAGA,MAAM,IAAIC,IAAI,EAAE,CAAGA,IAAI,CACrDE,MAAM,CAACS,aAAa,CAACD,SAAS,CAAED,KAAK,CAAC,CACxC,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,cAAc,CAAG,QAAAA,CAACV,MAAM,CAAEW,IAAI,CAAwB,IAAtB,CAAAC,YAAY,CAAAR,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC5D,KAAM,CAAAS,KAAK,CAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAC7B,GAAI,CAAAC,OAAO,CAAGf,MAAM,CAACgB,MAAM,CAE3B,IAAK,KAAM,CAAAC,IAAI,GAAI,CAAAJ,KAAK,CAAE,CACxB,GAAIE,OAAO,EAAI,IAAI,CAAE,MAAO,CAAAH,YAAY,CACxCG,OAAO,CAAGA,OAAO,CAACE,IAAI,CAAC,CACzB,CAEA,MAAO,CAAAF,OAAO,GAAKT,SAAS,CAAGS,OAAO,CAAGH,YAAY,CACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}